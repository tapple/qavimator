#ifndef _QEMBED_1804289383
#define _QEMBED_1804289383
#include <qimage.h>
#include <qdict.h>
static const QRgb stop_data[] = {
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x53269d1,0x1a3269d0,0x333269ce,0x3d3268cd,0x3d3268cc,0x343268cb,0x1c3267c9,
    0x63765bb,0x656565,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
    0x393269d1,0x8f3269d1,0xbf3269d0,0xdd326ad0,0xe8326bd5,0xe8326bd5,0xde3269ce,0xc13268cb,0x923268cb,0x3e3366c7,0x3656565,0x656565,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x233269d1,0x933269d2,0xed326cd7,0xfd3e77e1,0xff568bef,0xff6d9ef7,0xff94b2ea,0xff9db7e7,
    0xff7aa5f3,0xff5a8ff1,0xfd467adc,0xf4346bd3,0xb93267ca,0x3d3766be,0x4656565,0x656565,0x0,0x0,0x0,0x0,0x0,0x1f3269d1,
    0xb63269d2,0xff326fe0,0xff6291e9,0xffacc6f6,0xffd9e3f5,0xffeff3fa,0xfff2f5fb,0xfff2f5fb,0xfff1f5fb,0xffe0e8f7,0xffbed0f2,0xff759eea,0xff3871d9,0xd63268cb,
    0x4d3966b9,0x4656565,0x0,0x0,0x0,0x0,0x233269d1,0xb63269d2,0xfd3e77e0,0xff86acef,0xffd2def5,0xffe4ebf8,0xffe5ecf9,0xffe5ecf9,
    0xffe5ecf9,0xffe5ecf9,0xffe5ecf9,0xffe5ecf9,0xffe5ecf9,0xffdae4f6,0xffa0bbec,0xfe487bda,0xd93268ca,0x3c3865b8,0x2656565,0x656565,0x0,0x0,
    0x983269d0,0xff326fde,0xff83a9ef,0xffd1ddf4,0xffd7e2f6,0xffd7e2f6,0xffd7e2f6,0xffd7e2f6,0xffd7e2f6,0xffd7e2f6,0xffd7e2f6,0xffd7e2f6,0xffd7e2f6,0xffd7e2f6,
    0xffd5e0f5,0xff9bb7ec,0xff3c73d8,0xa13266c7,0xd656565,0x1656565,0x0,0x393269cd,0xef336cd5,0xff6190e7,0xffbbcef0,0xffc9d7f2,0xffa8bfeb,0xffacc2ec,
    0xffacc2ec,0xffacc2ec,0xffacc2ec,0xffacc2ec,0xffacc2ec,0xffacc2ec,0xffacc2ec,0xffa8bfeb,0xffc9d7f2,0xffc3d3f1,0xff749de8,0xf0356cd2,0x4f3865b8,0x7656565,
    0x53268cc,0x8f3268cc,0xfd3f77dd,0xff93b3ed,0xffb8ccee,0xffb9ccef,0xffa7beeb,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
    0xffffffff,0xffa7beeb,0xffb9ccef,0xffb6caee,0xff9bb6e5,0xfd467ad9,0xa13467c4,0x174f6285,0x1a3268cc,0xbf3268cc,0xff4d85ec,0xffa3bbe9,0xffaac1eb,0xffaac1eb,
    0xffa4bcea,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffa1bae9,0xff8bace7,0xff5e94f7,0xff508bf8,0xff397af1,
    0xcc3267c9,0x354163a3,0x333268cc,0xdd3269ce,0xff6192ed,0xff9ab5e7,0xff99b5e7,0xff99b5e7,0xffa1bae9,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
    0xffffffff,0xffffffff,0xffffffff,0xff8eaeeb,0xff578ef2,0xff3b80ff,0xff3b80ff,0xff397efc,0xe53268cc,0x534166a9,0x3d3268cc,0xe8326bd5,0xff6b97e8,0xff8aaae5,
    0xff8cabe5,0xff92afe6,0xffa0b9e9,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff5f96fa,0xff4284fc,0xff3b80ff,
    0xff3b80ff,0xff3a7ffd,0xee326ad3,0x604266a9,0x3d3268cc,0xe8326bd5,0xff5d8fed,0xff739be7,0xff769de7,0xff83a6e8,0xff93b1eb,0xffffffff,0xffffffff,0xffffffff,
    0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff5491ff,0xff3c81ff,0xff3c81ff,0xff3c81ff,0xff3b7ffd,0xee326ad3,0x624366a7,0x343268cb,0xde3269ce,
    0xff4684f6,0xff528cf5,0xff528cf5,0xff528cf5,0xff689af6,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff5491ff,
    0xff3c81ff,0xff3c81ff,0xff3d82ff,0xff3c7ffc,0xe63267cb,0x5b4465a3,0x1c3267c9,0xc13268cb,0xff377af4,0xff4385fd,0xff4385fd,0xff4385fd,0xff5a94fe,0xffffffff,
    0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff5491ff,0xff3c81ff,0xff4084ff,0xff4284ff,0xff3679f5,0xd03266c8,0x43466398,
    0x63765bb,0x923268cb,0xfd3773e2,0xff4888fc,0xff4988fc,0xff4988fc,0xff6097fd,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
    0xffffffff,0xff5d95fd,0xff4686fc,0xff4888fc,0xff4888fc,0xfd3773e2,0xaa3666c0,0x2a566279,0x656565,0x3e3366c7,0xee346cd3,0xff4d85eb,0xff5e92f1,0xff5f92f1,
    0xff6194f1,0xff75a1f2,0xff75a1f2,0xff75a1f2,0xff75a1f2,0xff75a1f2,0xff75a1f2,0xff75a1f2,0xff75a1f2,0xff6194f1,0xff5f92f1,0xff5e92f1,0xff4d85eb,0xf2356bd1,
    0x653e63a9,0x18656565,0x0,0x3656565,0x993268ca,0xff4075d6,0xff6d98e7,0xff749ce8,0xff749de8,0xff739ce8,0xff739ce8,0xff739de8,0xff749de8,0xff739ce8,
    0xff749ce8,0xff739ce8,0xff749de8,0xff739ce8,0xff749ce8,0xff6d98e7,0xff4075d6,0xb03365c2,0x2b656565,0xb656565,0x0,0x656565,0x2a3566c0,0xbd3368cb,
    0xfd4e7ed6,0xff7ca0e2,0xff82a5e6,0xff82a6e6,0xff82a6e6,0xff82a6e6,0xff82a6e6,0xff82a6e6,0xff82a6e6,0xff82a6e6,0xff82a6e6,0xff82a5e6,0xff7ca0e2,0xfd4e7ed6,
    0xca3467c7,0x54466399,0x14656565,0x2656565,0x0,0x0,0x2656565,0x2b3965b6,0xbf3468ca,0xff4a7ad2,0xff7399e1,0xff8cace7,0xff8dade8,0xff8dade8,
    0xff8dade8,0xff8dade8,0xff8dade8,0xff8dade8,0xff8cace7,0xff7399e1,0xff4a7ad2,0xca3467c6,0x51496395,0x1d656565,0x4656565,0x656565,0x0,0x0,
    0x656565,0x3656565,0x303965b7,0xa13266c7,0xf03d70cf,0xfd5784d7,0xff7a9cdb,0xff8eade5,0xff91afe8,0xff91afe8,0xff8eade5,0xff7a9cdb,0xfd5784d7,0xf23d70cf,
    0xb03365c2,0x54466399,0x1d656565,0x7656565,0x656565,0x0,0x0,0x0,0x0,0x0,0x2656565,0xd656565,0x4f3865b8,0xa13467c4,
    0xcc3267c9,0xe53469ca,0xee4172cd,0xee4172cd,0xe63469ca,0xd03266c8,0xaa3666c0,0x653e63a9,0x2b656565,0x14656565,0x4656565,0x656565,0x0,0x0,
    0x0,0x0,0x0,0x0,0x656565,0x1656565,0x7656565,0x174f6285,0x354163a3,0x534166a9,0x604266a9,0x624366a7,0x5b4465a3,0x43466398,
    0x2a566279,0x18656565,0xb656565,0x2656565,0x656565,0x0,0x0,0x0
};

/* Generated by qembed */
static const QRgb loop_data[] = {
    0x0,0x0,0x0,0x0,0x0,0x1001b7b,0x19001b7b,0x61001b7b,0xae001b7b,0xd8001c7c,0xf4001d7d,0xf1001d7d,0xd9001c7c,0xad001b7b,
    0x63001b7b,0x1a001b7b,0x1001b7b,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x11001b7b,0x78001b7b,
    0xea001d7d,0xff012a89,0xff0f48a2,0xff2362b4,0xff3373bf,0xff3071be,0xff2161b4,0xff0c46a0,0xff002a89,0xe8001d7d,0x7a001b7b,0x11001b7b,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x28001b7b,0xc1001b7b,0xfe012a8a,0xff2766b6,0xff88b5e2,0xffcbe0f3,0xfff0f6fb,0xfff8fafd,0xfff6f9fd,
    0xffecf3fa,0xffc2daf1,0xff76abdd,0xff1c5fb3,0xfe002a89,0xc0001b7b,0x29001b7b,0x0,0x0,0x0,0x0,0x0,0x29001b7b,0xd5001b7b,
    0xff033896,0xff6fa3d9,0xffe5f0f9,0xfff7fafd,0xffeef5fb,0xffeaf2fa,0xffe9f2fa,0xffe9f1f9,0xffe9f2fa,0xffeaf2fa,0xffebf2fa,0xffcadff3,0xff498cd0,0xff013796,
    0xd5001b7b,0x28001b7b,0x0,0x0,0x0,0x11001b7b,0xc0001b7b,0xff033896,0xff8cb7e1,0xfff8fbfd,0xfff0f6fb,0xffe4eff8,0xffd7e7f6,0xffd2e4f4,
    0xffd3e4f4,0xffd2e4f4,0xffd2e4f4,0xffd2e4f4,0xffd2e4f4,0xffd2e4f5,0xffcce0f3,0xff5194d4,0xff013795,0xc1001b7b,0x11001b7b,0x0,0x1001b7b,0x7a001b7b,
    0xfe012a89,0xff6da2d7,0xfff6f9fd,0xffe3eef8,0xffdae9f6,0xffe0ecf7,0xfff0f6fb,0xfff8fbfd,0xfffdfefe,0xfff7fafd,0xffe8f1f9,0xffcadff2,0xffbbd6ef,0xffbad6ef,
    0xffbbd6ef,0xffb0d0ed,0xff2d7cca,0xfe002a89,0x78001b7b,0x1001b7b,0x1a001b7b,0xe8001d7d,0xff2665b6,0xffe2eef8,0xffdce9f7,0xffcbe0f3,0xffe1edf8,0xfffdfefe,
    0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xfffbfcfe,0xffb2cfeb,0xffa3c8ea,0xffa3c8ea,0xffa3c8ea,0xff78afe0,0xff0652af,0xea001d7d,0x19001b7b,
    0x63001c7c,0xff012a89,0xff85b4e0,0xffe1edf8,0xffbcd7ef,0xffd1e3f4,0xfffdfeff,0xffffffff,0xfff3f7fc,0xffccdff2,0xffb9d3ed,0xffcbdef2,0xffeef4fa,0xfff0f5fa,
    0xff98bde3,0xff8dbbe5,0xff8dbbe5,0xff8dbbe5,0xff88b8e4,0xff2379cb,0xff002a89,0x61001c7c,0xad032180,0xff104aa3,0xffbfd8f0,0xffb8d4ef,0xffa7caeb,0xfff2f7fc,
    0xffffffff,0xffe9f1fa,0xff8cb8e3,0xff73abdf,0xff75ace0,0xff75ace0,0xff80b1e1,0xff81b0df,0xff73aade,0xff76ade0,0xff76ade0,0xff76ade0,0xff76ade0,0xff3f8dd4,
    0xff0142a1,0xae032180,0xd9062786,0xff2365b7,0xffc2daf1,0xff72abdf,0xff8ebce5,0xfffdfefe,0xfffdfefe,0xff98c0e7,0xff5e9fda,0xff5fa0db,0xff5fa0db,0xff5fa0db,
    0xff5fa0db,0xff5fa0db,0xff5fa0db,0xff74ace0,0xffbad6ef,0xff7eb1e0,0xff5fa0db,0xff4490d5,0xff0352b0,0xd8062786,0xf1092e8c,0xff2e73c1,0xff94bfe6,0xff4893d5,
    0xff87b8e4,0xfffefeff,0xfff1f6fc,0xff5f9fda,0xff4893d5,0xff4893d5,0xff4893d5,0xff4893d5,0xff4893d5,0xff559ad8,0xffa7cbeb,0xfff1f6fc,0xfffcfdfe,0xff79aadb,
    0xff4893d5,0xff3889d2,0xff055bb8,0xf4092e8c,0xf40c3390,0xff2e75c2,0xff6da8dd,0xff2980cf,0xff7bb0e1,0xfffefeff,0xfff0f6fb,0xff4e95d6,0xff3285d1,0xff3285d1,
    0xff3285d1,0xff3b8bd3,0xff8dbbe5,0xffecf4fb,0xffffffff,0xffffffff,0xfffafbfd,0xff4d90d1,0xff207bcd,0xff0c6fc8,0xff055bb8,0xf10c3390,0xd8103894,0xff246abc,
    0xff599cd9,0xff0a6ec8,0xff3c8bd3,0xfff9fbfe,0xfffdfefe,0xff79afe0,0xff217bcd,0xff217bcd,0xff217bcd,0xff6fa9de,0xfffcfdfe,0xffffffff,0xffffffff,0xffffffff,
    0xfff5f8fc,0xff156fc5,0xff0a6ec8,0xff0a6ec8,0xff0b5bb7,0xd9103894,0xae133c98,0xff1b5bb2,0xff559ad8,0xff1273ca,0xff1373ca,0xffcee2f4,0xffffffff,0xffe3eef8,
    0xff4c95d7,0xff1474ca,0xff1273ca,0xff1c78cc,0xffadceec,0xffffffff,0xffffffff,0xffffffff,0xffdfebf6,0xff106ec6,0xff1273ca,0xff1474ca,0xff1255b0,0xad133c98,
    0x6116429d,0xff174ca6,0xff4891d4,0xff237dcd,0xff1977cb,0xff5ea0da,0xfff9fcfe,0xffffffff,0xffeef5fb,0xffafd0ed,0xff8bbbe5,0xffadcfec,0xffedf4fb,0xffffffff,
    0xffffffff,0xffffffff,0xffc0d7ed,0xff1875c9,0xff1d7acc,0xff1c77ca,0xff164ca6,0x6316429d,0x191947a2,0xea1a49a4,0xff2c73c2,0xff3d8cd3,0xff227cce,0xff227dce,
    0xff78afe0,0xfff3f8fc,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffeff5fa,0xff97bde3,0xffe2edf7,0xffa0c1e5,0xff227ccd,0xff2d82d0,0xff1f6bbf,
    0xe81a49a4,0x1a1947a2,0x11b4ba5,0x781d4da7,0xfe1f57af,0xff3a87cf,0xff3a8bd2,0xff2981cf,0xff2981cf,0xff4390d5,0xff9cc4e8,0xffd5e5f5,0xffe9f2f9,0xffd7e6f4,
    0xff9fc3e6,0xff488ed1,0xff2980ce,0xff3b8bd2,0xff3985ce,0xff398bd2,0xff2e80cd,0xfe1f57b0,0x7a1d4da8,0x11b4ba5,0x0,0x111f51ab,0xc12053ac,0xff2665b9,
    0xff3e8bd2,0xff4591d5,0xff3387d1,0xff3085d1,0xff3085d1,0xff3084d0,0xff3083cf,0xff2f83cf,0xff3084d0,0xff3085d1,0xff3085d1,0xff3487d1,0xff4592d5,0xff3d8bd2,
    0xff2665b9,0xc02053ac,0x111f51ab,0x0,0x0,0x0,0x282358b1,0xd52359b2,0xff2a6abd,0xff438ed3,0xff559bd9,0xff4894d6,0xff3e8ed4,0xff398bd3,
    0xff388ad3,0xff388ad3,0xff398bd3,0xff3e8ed4,0xff4894d6,0xff559bd9,0xff448ed3,0xff2a6abe,0xd52359b2,0x292358b1,0x0,0x0,0x0,0x0,
    0x0,0x29255cb5,0xc0265eb6,0xfe2b68bd,0xff3e83cc,0xff579bd8,0xff60a2db,0xff60a2db,0xff5ea1db,0xff5ea0da,0xff60a2db,0xff60a2db,0xff579bd8,0xff3e83cd,
    0xfe2b68bd,0xc1265eb6,0x28255cb5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x112861b9,0x7a2963ba,0xe82b65bc,0xff2f6ec1,
    0xff3b7cc9,0xff4689cf,0xff4d8fd2,0xff4e90d3,0xff4689cf,0xff3b7dc9,0xff2f6dc1,0xea2b66bc,0x782963ba,0x112861b9,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x12b66bd,0x1a2c67be,0x632d68bf,0xad2d69c0,0xd92e6ac1,0xf12e6bc1,0xf42e6bc1,0xd82d6ac1,0xae2d69c0,
    0x612d68bf,0x192c67be,0x12b66bd,0x0,0x0,0x0,0x0,0x0
};

static const QRgb play_data[] = {
    0x0,0x0,0x0,0x0,0x0,0x0,0x14001a7b,0x60001b7b,0xae001b7b,0xd7001b7b,0xf4001b7b,0xf1001b7b,0xd9001b7b,0xac001b7b,
    0x62001b7b,0x15001b7a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd001a7b,0x78001b7b,
    0xeb001c7b,0xff002988,0xff03429f,0xff1e61b5,0xff3175c1,0xff3073c0,0xff1b60b4,0xff02409e,0xff002989,0xeb001b7c,0x7b001b7b,0xd001b7b,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x21001b7b,0xc6001b7b,0xfe002989,0xff1f62b5,0xff87b5e2,0xffd5e6f5,0xfff2f7fc,0xfff9fbfd,0xfff8fbfd,
    0xfff0f6fb,0xffcadff3,0xff73aadd,0xff145bb3,0xfe002988,0xc5001b7b,0x22001b7b,0x0,0x0,0x0,0x0,0x0,0x22001b7b,0xdc001b7b,
    0xff043896,0xff6ba2d9,0xffe8f2f9,0xfff7fafd,0xffeff5fb,0xffebf2fa,0xffeaf2fa,0xffeaf2fa,0xffeaf2fa,0xffeaf2fa,0xffecf3fa,0xffcde1f3,0xff468cd0,0xff013796,
    0xdc001b7b,0x21001b7b,0x0,0x0,0x0,0xd001b7b,0xc5001b7b,0xff043997,0xff8cb8e3,0xfff8fafd,0xfff0f6fb,0xffe5eff9,0xffd9e8f6,0xffd9e8f6,
    0xffd6e6f5,0xffd2e4f5,0xffd2e4f5,0xffd2e4f5,0xffd2e4f5,0xffd3e5f5,0xffcde1f3,0xff5095d5,0xff013796,0xc6001b7b,0xd001a7b,0x0,0x0,0x7b001b7b,
    0xfe002988,0xff6ba2d8,0xfff6f9fc,0xffe4eef8,0xffdae9f6,0xffd8e7f6,0xffdbe9f6,0xfffcfdfe,0xfff6f9fd,0xffc8ddf2,0xffbcd7ef,0xffbcd7f0,0xffbcd7f0,0xffbcd7f0,
    0xffbcd7f0,0xffb2d1ed,0xff2b7cca,0xfe002989,0x78001b7b,0x0,0x15001b7a,0xeb001b7c,0xff1f62b5,0xffe6f0f9,0xffdceaf6,0xffcce0f3,0xffc9def2,0xffc0d9f0,
    0xffc5dcf1,0xffffffff,0xffffffff,0xfff5f9fc,0xffb6d3ee,0xffa5c9ea,0xffa5c9ea,0xffa5c9ea,0xffa5c9ea,0xffa5c9ea,0xff7ab0e1,0xff0352af,0xeb001c7b,0x14001a7b,
    0x62001c7c,0xff002989,0xff84b4e1,0xffe2edf8,0xffbdd7ef,0xffb8d4ee,0xffb2d1ed,0xff97c1e7,0xffb4d2ee,0xffffffff,0xffffffff,0xffffffff,0xfff3f8fc,0xffa5c9ea,
    0xff8ebce5,0xff8ebce5,0xff8ebce5,0xff8ebce5,0xff8cbae5,0xff217acb,0xff002989,0x60001c7c,0xac032180,0xff0443a1,0xffc9dff2,0xffb7d4ee,0xffa4c9ea,0xff9fc5e9,
    0xff8dbbe5,0xff77aee0,0xffa9cbeb,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xfff2f7fc,0xff95bfe6,0xff77aee0,0xff77aee0,0xff77aee0,0xff77aee0,0xff408ed4,
    0xff0142a1,0xae032080,0xd9062584,0xff2065b8,0xffc2daf1,0xff72abdf,0xff67a4dc,0xff63a2db,0xff61a1db,0xff60a0db,0xff9fc5e9,0xffffffff,0xffffffff,0xffffffff,
    0xffffffff,0xffffffff,0xfff1f6fb,0xff84b5e2,0xff60a0db,0xff60a0db,0xff60a0db,0xff4591d5,0xff0252b1,0xd7062584,0xf1092b89,0xff2f75c3,0xff90bde5,0xff4a93d6,
    0xff4a93d6,0xff4a93d6,0xff4a93d6,0xff4a93d6,0xff96c0e7,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xfff1f6fb,0xff63a1da,0xff4a93d6,
    0xff4a93d6,0xff3c8bd3,0xff025bb9,0xf4092b89,0xf40d318e,0xff2f77c4,0xff6aa6dd,0xff2d83cf,0xff3487d1,0xff3587d1,0xff3587d1,0xff3587d1,0xff8fbde6,0xffffffff,
    0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xff6fa4d9,0xff3185d0,0xff227ccd,0xff0d6fc8,0xff055dba,0xf10d318e,0xd7103793,0xff236abc,
    0xff589cd9,0xff0b6fc8,0xff1172c9,0xff1876cb,0xff1d7acc,0xff207bcd,0xff8bbae5,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffb5cfea,
    0xff1a72c6,0xff0c6fc9,0xff0b6fc8,0xff0b6fc8,0xff0c5db8,0xd9103793,0xae133c98,0xff1558b0,0xff5a9dda,0xff1373ca,0xff1273ca,0xff1273ca,0xff1273ca,0xff1373ca,
    0xff8abae5,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffbad3ec,0xff1f75c7,0xff1273ca,0xff1273ca,0xff1373ca,0xff1575ca,0xff1256b0,0xac133c98,
    0x5f17429d,0xff174ca6,0xff4a93d5,0xff227ccd,0xff1a78cc,0xff1a78cc,0xff1a78cc,0xff1a78cc,0xff94c0e7,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffc0d7ee,
    0xff287bca,0xff1a78cb,0xff1a78cc,0xff1a78cc,0xff1e7acc,0xff1d78cb,0xff174ca6,0x6217429d,0x141848a1,0xeb1a48a2,0xff2a73c3,0xff3e8dd3,0xff237dce,0xff227dcd,
    0xff227dcd,0xff227dcd,0xff9ec6e9,0xffffffff,0xffffffff,0xffffffff,0xffc6dcf0,0xff3081cd,0xff227ccd,0xff227dcd,0xff227dcd,0xff237dce,0xff2e84d0,0xff1f6cc0,
    0xeb1948a2,0x151947a1,0x0,0x781c4ca7,0xfe1f57af,0xff3a88d0,0xff3a8bd3,0xff2a82cf,0xff2a81cf,0xff2a82cf,0xff9fc7e9,0xffffffff,0xffffffff,0xffcde0f2,
    0xff3987d0,0xff2a81cf,0xff2a82cf,0xff2a82cf,0xff2a82cf,0xff398ad3,0xff2f81ce,0xfe1f56af,0x7b1c4ca7,0x0,0x0,0xd1f51aa,0xc62052ac,0xff2665ba,
    0xff3e8cd3,0xff4592d5,0xff3488d2,0xff3186d1,0xff579cd9,0xffd7e7f6,0xffc1d9f0,0xff408cd2,0xff3186d1,0xff3186d1,0xff3186d1,0xff3488d2,0xff4692d5,0xff3e8cd2,
    0xff2665ba,0xc52052ac,0xd1e51aa,0x0,0x0,0x0,0x212357af,0xdc2358b1,0xff2b6bbe,0xff448fd3,0xff569cd9,0xff4994d6,0xff3d8dd4,0xff3a8cd3,
    0xff398ad2,0xff398bd3,0xff3a8cd3,0xff3d8dd4,0xff4994d6,0xff569cd9,0xff458fd3,0xff2b6bbe,0xdc2358b1,0x222256b0,0x0,0x0,0x0,0x0,
    0x0,0x22255cb4,0xc5275eb6,0xfe2b67bc,0xff3e84cd,0xff589dd9,0xff65a4dc,0xff61a2db,0xff5ea1db,0xff5ea1db,0xff61a2db,0xff64a4dc,0xff589cd9,0xff3e84cd,
    0xfe2b67bc,0xc6275eb6,0x21265cb4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd2861b9,0x7b2963ba,0xeb2a64bb,0xff2f6dc0,
    0xff3a7cc9,0xff488bd0,0xff4f92d3,0xff4f92d4,0xff488bd0,0xff3a7cc9,0xff2f6dc0,0xeb2a64bb,0x782963ba,0xd2863b9,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x152b69bf,0x622c68bf,0xac2d69c0,0xd92d6ac0,0xf12d6ac0,0xf42d6ac0,0xd72d69c0,0xae2d69c0,
    0x5f2c69bf,0x142c68bf,0x0,0x0,0x0,0x0,0x0,0x0
};

static struct EmbedImage {
    int width, height, depth;
    const unsigned char *data;
    int numColors;
    const QRgb *colorTable;
    bool alpha;
    const char *name;
} embed_image_vec[] = {
    { 22, 22, 32, (const unsigned char*)stop_data, 0, 0, TRUE, "stop" },
    { 22, 22, 32, (const unsigned char*)loop_data, 0, 0, TRUE, "loop" },
    { 22, 22, 32, (const unsigned char*)play_data, 0, 0, TRUE, "play" },
    { 0, 0, 0, 0, 0, 0, 0, 0 }
};

static const QImage& qembed_findImage( const QString& name )
{
    static QDict<QImage> dict;
    QImage* img = dict.find( name );
    if ( !img ) {
	for ( int i = 0; embed_image_vec[i].data; i++ ) {
	    if ( strcmp(embed_image_vec[i].name, name.latin1()) == 0 ) {
		img = new QImage((uchar*)embed_image_vec[i].data,
			    embed_image_vec[i].width,
			    embed_image_vec[i].height,
			    embed_image_vec[i].depth,
			    (QRgb*)embed_image_vec[i].colorTable,
			    embed_image_vec[i].numColors,
			    QImage::BigEndian );
		if ( embed_image_vec[i].alpha )
		    img->setAlphaBuffer( TRUE );
		dict.insert( name, img );
		break;
	    }
	}
	if ( !img ) {
	    static QImage dummy;
	    return dummy;
	}
    }
    return *img;
}

#endif
